/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Mon Aug 01 2022 19:13:23 GMT-0400 (Eastern Daylight Time).
 */

define(["css!./styles/SimVizWidget.css"], function () {
  "use strict";

  var WIDGET_CLASS = "sim-viz";

  function SimVizWidget(logger, container) {
    this._logger = logger.fork("Widget");

    this._el = container;

    this.nodes = {};
    this._initialize();

    this._logger.debug("ctor finished");
  }

  SimVizWidget.prototype._initialize = function () {
    var width = this._el.width(),
      height = this._el.height(),
      self = this;

    // set widget class
    this._el.addClass(WIDGET_CLASS);

    // Create a dummy header
    this._el.append("<h3>SimViz Events:</h3>");

    // Registering to events can be done with jQuery (as normal)
    this._el.on("dblclick", function (event) {
      event.stopPropagation();
      event.preventDefault();
      self.onBackgroundDblClick();
    });
  };

  SimVizWidget.prototype.onWidgetContainerResize = function (width, height) {
    this._logger.debug("Widget is resizing...");
  };

  // Adding/Removing/Updating items
  SimVizWidget.prototype.addNode = function (desc) {
    if (desc) {
      // Add node to a table of nodes
      var node = document.createElement("div"),
        label = "children";

      if (desc.childrenIds.length === 1) {
        label = "child";
      }

      this.nodes[desc.id] = desc;
      node.innerHTML =
        'Adding node "' +
        desc.name +
        '" (click to view). It has ' +
        desc.childrenIds.length +
        " " +
        label +
        ".";

      // TODO conditional class additions of each node here for transition and places

      this._el.append(node);
      node.onclick = this.onNodeClick.bind(this, desc.id);
    }
  };

  SimVizWidget.prototype.removeNode = function (gmeId) {
    var desc = this.nodes[gmeId];
    this._el.append('<div>Removing node "' + desc.name + '"</div>');
    delete this.nodes[gmeId];
  };

  SimVizWidget.prototype.updateNode = function (desc) {
    if (desc) {
      this._logger.debug("Updating node:", desc);
      this._el.append('<div>Updating node "' + desc.name + '"</div>');
    }
  };

  /* * * * * * * * Visualizer event handlers * * * * * * * */

  SimVizWidget.prototype.onNodeClick = function (/*id*/) {
    // This currently changes the active node to the given id and
    // this is overridden in the controller.
  };

  SimVizWidget.prototype.onBackgroundDblClick = function () {
    this._el.append("<div>Background was double-clicked!!</div>");
  };

  /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
  SimVizWidget.prototype.destroy = function () {};

  SimVizWidget.prototype.onActivate = function () {
    this._logger.debug("SimVizWidget has been activated");
  };

  SimVizWidget.prototype.onDeactivate = function () {
    this._logger.debug("SimVizWidget has been deactivated");
  };

  return SimVizWidget;
});
