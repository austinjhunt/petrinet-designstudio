/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Mon Aug 01 2022 19:13:23 GMT-0400 (Eastern Daylight Time).
 */

define(["jointjs", "css!./styles/SimVizWidget.css"], function (joint) {
  "use strict";

  var WIDGET_CLASS = "sim-viz";

  function SimVizWidget(logger, container) {
    this._logger = logger.fork("Widget");

    this._el = container;

    this.nodes = {};
    this._initialize();

    this._logger.debug("ctor finished");
  }

  SimVizWidget.prototype._initialize = function () {
    var width = this._el.width(),
      height = this._el.height(),
      self = this;

    // set widget class
    self._el.addClass(WIDGET_CLASS);

    // initialize Joint JS petrinet
    self._jointPetriNet = new joint.dia.Graph();
    self._jointPaper = new joint.dia.Paper({
      el: self._el,
      width: width,
      height: height,
      model: self._jointSM,
      interactive: false,
    });
    // add event calls to elements
    self._jointPaper.on("element:pointerdblclick", function (elementView) {
      const currentElement = elementView.model;
      // console.log(currentElement);
      if (self._webgmeSM) {
        // console.log(self._webgmeSM.id2state[currentElement.id]);
        self._setCurrentState(self._webgmeSM.id2state[currentElement.id]);
      }
    });

    // Create a dummy header
    self._el.append("<h3>SimViz Events:</h3>");

    // Registering to events can be done with jQuery (as normal)
    self._el.on("dblclick", function (event) {
      event.stopPropagation();
      event.preventDefault();
      self.onBackgroundDblClick();
    });
  };

  SimVizWidget.prototype.onWidgetContainerResize = function (width, height) {
    this._logger.debug("Widget is resizing...");
  };

  // Adding/Removing/Updating items
  SimVizWidget.prototype.addNode = function (desc) {
    if (desc) {
      // Add node to a table of nodes
      var node = document.createElement("div"),
        label = "children";

      if (desc.childrenIds.length === 1) {
        label = "child";
      }

      this.nodes[desc.id] = desc;
      node.innerHTML =
        'Adding node "' +
        desc.name +
        '" (click to view). It has ' +
        desc.childrenIds.length +
        " " +
        label +
        ".";

      // TODO conditional class additions of each node here for transition and places

      this._el.append(node);
      node.onclick = this.onNodeClick.bind(this, desc.id);
    }
  };

  SimVizWidget.prototype.removeNode = function (gmeId) {
    var desc = this.nodes[gmeId];
    this._el.append('<div>Removing node "' + desc.name + '"</div>');
    delete this.nodes[gmeId];
  };

  SimVizWidget.prototype.updateNode = function (desc) {
    if (desc) {
      this._logger.debug("Updating node:", desc);
      this._el.append('<div>Updating node "' + desc.name + '"</div>');
    }
  };

  SimVizWidget.prototype.initializePlaceVertices = function (petriNet, self) {
    /* create a Circle vertex for each place using Joint JS; create an object
    mapping the joint vertex ids back to the place ids and set
    petriNet.id2place as that object.
    also set each place.joint (petriNet.places[pid1,pid2,...].joint)
    to respective joint vertex
    */
    console.log("initializing place vertices");
    petriNet.id2place = {
      /* map on-screen ids to place ids */
    };
    Object.keys(petriNet.places).forEach((placeId) => {
      let vertex = new joint.shapes.standard.Circle({
        position: petriNet.places[placeId].position,
        size: { width: 60, height: 60 },
        attrs: {
          label: {
            text: petriNet.places[placeId].name,
            fontWeight: "bold",
            /* FIXME: need child circles inside up to 12 to indicate marking! */
          },
          body: {
            strokeWidth: 3,
            cursor: "pointer",
          },
        },
      });
      vertex.addTo(self._jointPetriNet);
      petriNet.places[placeId].joint = vertex;
      petriNet.id2place[vertex.id] = placeId;
    });
    console.log("id2place: ");
    console.log(petriNet.id2place);
  };

  SimVizWidget.prototype.initializeTransitionVertices = function (
    petriNet,
    self
  ) {
    /* create a white square vertex for each transition using Joint JS; create an object
    mapping the joint vertex ids back to the transition ids and set
    petriNet.id2transition as that object.
    also set each transition.joint (petriNet.transitions[tid1,tid2,...].joint)
    to respective joint vertex
    */
    console.log("initializing transition vertices");
    petriNet.id2transition = {
      /* map on-screen ids to place ids */
    };
    Object.keys(petriNet.transitions).forEach((transitionId) => {
      let vertex = new joint.shapes.standard.Rectangle({
        position: petriNet.transitions[transitionId].position,
        size: { width: 60, height: 60 },
        attrs: {
          label: {
            text: petriNet.transitions[transitionId].name,
            fontWeight: "bold",
          },
          body: {
            strokeWidth: 3,
            cursor: "pointer",
          },
        },
      });
      vertex.addTo(self._jointPetriNet);
      petriNet.transitions[transitionId].joint = vertex;
      petriNet.id2transition[vertex.id] = transitionId;
    });
    console.log("id2transition: ");
    console.log(petriNet.id2transition);
  };

  SimVizWidget.prototype.initializeArcs = function (petriNet, arcType, self) {
    console.log("initializing arcs");
    let arcsArray =
      arcType === "ArcPlaceToTransition"
        ? petriNet.arcsPlaceToTransition
        : petriNet.arcsTransitionToPlace;
    arcsArray.forEach((arc) => {
      let src =
        arcType === "ArcPlaceToTransition"
          ? petriNet.places[arc.src]
          : petriNet.transitions[arc.src];
      let dst =
        arcType === "ArcPlaceToTransition"
          ? petriNet.transitions[arc.dst]
          : petriNet.places[arc.dst];

      src.jointOutArcs = src.jointOutArcs || {};
      let link = new joint.shapes.standard.Link({
        // need to use the joint ids from the actual place and trans ids
        source: { id: src.joint.id },
        target: { id: dst.joint.id },
        attrs: {
          line: {
            strokeWidth: 2,
          },
          wrapper: {
            cursor: "default",
          },
        },
        labels: [
          {
            position: {
              distance: 0.5,
              offset: 0,
              args: {
                keepGradient: true,
                ensureLegibility: true,
              },
            },
            attrs: {
              text: {
                text: arc.name,
                fontWeight: "bold",
              },
            },
          },
        ],
      });
      link.addTo(self._jointPetriNet);
      src.jointOutArcs[arc.id] = link;
      console.log("jointOutArcs: ");
      console.log(src.jointOutArcs);
    });
  };

  // State Machine manipulating functions called from the controller
  SimVizWidget.prototype.initMachine = function (petriNetDescriptor) {
    console.log("petriNetDescriptor");
    console.log(petriNetDescriptor);
    const self = this;
    self._webgmePetriNet = petriNetDescriptor;
    console.log("updating .current to startingPlace");
    self._webgmePetriNet.current = self._webgmePetriNet.startingPlace;
    console.log("clearing _jointPetriNet");
    self._jointPetriNet.clear();
    const petriNet = self._webgmePetriNet;

    SimVizWidget.prototype.initializePlaceVertices(petriNet, self);
    SimVizWidget.prototype.initializeTransitionVertices(petriNet, self);
    ["ArcsPlaceToTransition", "ArcsTransitionToPlace"].forEach((arcType) => {
      SimVizWidget.prototype.initializeArcs(petriNet, arcType, self);
    });

    console.log("refreshing visualization");
    //now refresh the visualization
    self._jointPaper.updateViews();
    console.log("refreshed with .updateViews()");

    console.log("decorating machine with ._decorateMachine()");
    self._decorateMachine();
    console.log("decorated");
  };

  SimVizWidget.prototype.destroyMachine = function () {};

  SimVizWidget.prototype.deadlockReached = function () {
    /* return true if there is no enabled transition, where a
    transition is enabled if for all inplaces of the transition
    the amount of tokens at the place is nonzero.

    So return true if for all transitions t_i,
      for all inplaces in_p of t_i,
        in_p.marking is <= 0 (really min is 0 but will use <=)
    */
  };

  SimVizWidget.prototype.fireEvent = function (event) {
    /* The following definitions cover how the petri net
    progress from one marking to another:
    1) t∈T is ​enabled ​if∀p∈P |∃f(p→t)∈F M(p) > 0 - for all
    ​inplaces ​of the transition (that are connected to the
      transition via an incoming arc) the amount of tokens
      at the place is non zero

    2) Firing ​an enabled transition decreases the amount of
    tokens on all ​inplaces w​ ith one and increases the amount
    of token in all ​outplaces ​of the transition by one.
    */
    console.log("fire event");
    const self = this;
    // current is not defined by a single place but by the marking for the full
    // FIXME
    const current =
      self._webgmePetriNet.places[self._webgmePetriNet.current] ||
      self._webgmePetriNet.transitions[self._webgmePetriNet.current];

    // dont worry about a "current" node. instead fire ALL fireable events
    console.log(current);
    const link = current.jointOutArcs[event];
    const linkView = link.findView(self._jointPaper);
    linkView.sendToken(
      joint.V("circle", { r: 10, fill: "black" }),
      { duration: 500 },
      function () {
        self._webgmePetriNet.current = current.outArcs[event];
        self._decorateMachine();
      }
    );
    console;
    if (SimVizWidget.prototype.deadlockReached()) {
    }
  };

  SimVizWidget.prototype.resetMachine = function () {
    this._webgmePetriNet.current = this._webgmePetriNet.startingPlace;
    this._decorateMachine();
  };

  SimVizWidget.prototype._decorateMachine = function () {
    const petriNet = this._webgmePetriNet;
    console.log("_decorateMachine:petriNet");
    console.log(petriNet);
    Object.keys(petriNet.places).forEach((placeId) => {
      petriNet.places[placeId].joint.attr("body/stroke", "#333333");
    });
    petriNet.places[petriNet.current].joint.attr("body/stroke", "blue");
    petriNet.setFireableEvents(
      Object.keys(petriNet.places[petriNet.current].outArcs)
    );
  };

  SimVizWidget.prototype._setCurrentState = function (newCurrent) {
    this._webgmePetriNet.current = newCurrent;
    this._decorateMachine();
  };

  /* * * * * * * * Visualizer event handlers * * * * * * * */

  SimVizWidget.prototype.onNodeClick = function (/*id*/) {
    // This currently changes the active node to the given id and
    // this is overridden in the controller.
  };

  SimVizWidget.prototype.onBackgroundDblClick = function () {
    this._el.append("<div>Background was double-clicked!!</div>");
  };

  /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
  SimVizWidget.prototype.destroy = function () {};

  SimVizWidget.prototype.onActivate = function () {
    this._logger.debug("SimVizWidget has been activated");
  };

  SimVizWidget.prototype.onDeactivate = function () {
    this._logger.debug("SimVizWidget has been deactivated");
  };

  return SimVizWidget;
});
